import axios from 'axios';
import Head from 'next/head'
import Image from 'next/image';
import {useState} from 'react'; 
import ArtistCard from '../components/ArtistCard';
import GenreCard from '../components/GenreCard';
import TrackCard from '../components/TrackCard';

export default function Home({signInPath}) {
  const [name, setName] = useState('')
  const [favoriteArtists, setFavoriteArtists] = useState([])
  const [favoriteGenres, setFavoriteGenres] = useState([])
  const [selectedArtists, setSelectedArtists] = useState([])
  const [selectedGenres, setSelectedGenres] = useState([])
  const [artistsWithIds, setArtistsWithIds] = useState({})
  const [recommendation, setRecommendation] = useState([])

  const signIn = () => {
    // redirect the user to the spotify authentication 
    // using the authentication code flow
    // 1. create the correct query url 
    // 2. redirect the user with the query url to the api 
    window.location.href = signInPath; 
  }

  const getInfo = async () => {
    const response = await axios.get('/api/getInfo')
    const data = await response.data
    setName(data.name)
  }

  const getTopTracks = async () => {
    const response = await axios.get('/api/getTopTracks')
    const data = await response.data

    // create artist Id Object
    const artistIdObject = {}
    data.favoriteArtistsWithIds.map(item => 
        artistIdObject[item.name] = item.id 
    )

    // get favorite artist 
    const favoriteArtist = data.favoriteArtistsWithIds.map(
      item => item.name
    )

    // set artistIdObject
    setArtistsWithIds(artistIdObject)
    // update of the array is not needed because 
    // we want the favorite artists and favorite genres to 
    // update every time
    setFavoriteArtists([...favoriteArtist])
    setFavoriteGenres([...data.favoriteGenres])
  }

  const selectItem = (item, category) => {
    if(category==='artist'){
      setSelectedArtists([...selectedArtists, item])
    }
    else if(category==='genre'){
      setSelectedGenres([...selectedGenres, item])
    }
  }

  const removeItem = (item, category) => {
    if(category==='artist'){
      const newSelectedArtists = [...selectedArtists].filter((value)=> value!==item)
      setSelectedArtists([...newSelectedArtists])
    }
    else if(category==='genre'){
      const newSelectedGenres = [...selectedGenres].filter((value)=> value!==item)
      setSelectedGenres([...newSelectedGenres])
    }
  }

  const getRecommendation = async () => {
    
    // use the object artistsWithIds which is 
    // used as a key-value(artistname - id) pair to get the id
    // for each artists 
    const selectedArtistsId = selectedArtists.map(
      item => artistsWithIds[item]
    )
    
    // make sure artistsId and genres are joined with a comma
    // also empty arrray will be converted to strings using join()
    const response = await axios.get(
      '/api/getRecommendation',
      {
        params: {
          artists: selectedArtistsId.join(","),
          genres: selectedGenres.join(",")
        }
      }
      )
    const data = await response.data 
    setRecommendation([...data.tracks])
  }

  return (
    <div>
      <Head>
        <title>Beat Recommender 2</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='font-sans grid grid-rows-10 grid-cols-10 bg-[#191414] text-white' >
        <div className='row-span-2 col-span-10'>
          <div className='bg-white float-right mt-3 mr-3 rounded-lg flex items-center pl-2 pr-3 hover:scale-105 cursor-pointer text-black' onClick={getInfo}>            
            {name=='' ? 
                <>
                  <Image
                  width='30px'
                  height='30px'
                  src={'/spotifylogo.png'}
                  />
                  <span className='text-sm'>Log in with Spotify</span>
                </> 
               :
                <>
                  <Image
                  width='30px'
                  height='30px'
                  src={'/spotifylogo.png'}
                  />
                  <span className='text-sm'>Connected as {name}</span> 
                </>
          }
          </div>
        </div>
        <h1 className='text-3xl row-span-1 col-span-10 text-center text-white'>Beat Recommender 2</h1>
        <div className='row-span-1 col-span-10 flex justify-center gap-3 mt-5 text-black'>
          <button className='bg-gradient-to-r from-green-400 to-blue-500 rounded-lg py-1 px-2 hover:scale-105 cursor-pointer' onClick={signIn}>Sign in with Spoitfy</button>
          <button className='bg-gradient-to-r from-green-400 to-blue-500 rounded-lg py-1 px-2 hover:scale-105 cursor-pointer' onClick={getInfo}>Get user info</button>
          <button className='bg-gradient-to-r from-green-400 to-blue-500 rounded-lg py-1 px-2 hover:scale-105 cursor-pointer' onClick={getTopTracks}>Get favorite tracks</button>
        </div>
        <div className='row-span-3 col-span-5 px-5 mt-5'>
          <h2 className=''>Favorite Artists</h2>
          <ul className='grid grid-cols-2'>
            { 
            favoriteArtists.length ==0 ? <div>fetching...</div> :
            favoriteArtists.map((item)=><ArtistCard
            onClick={()=>{selectItem(item, 'artist')}}
            image={''}
            artist={item}
          />)
            }
          </ul>
        </div>
        <div className='row-span-3 col-span-5 px-5 mt-5'>
          <h2>Selected Favorite Artists</h2>
          <ul className='grid grid-cols-2'>
            { 
            selectedArtists.length ==0 ? <div>None selected</div> :
            selectedArtists.map((item)=><ArtistCard
            onClick={()=>{removeItem(item, 'artist')}}
            image={''}
            artist={item}
          />)
            }
          </ul>
        </div>
        <div className='row-span-3 col-span-5 px-5 mt-2' >
          <h2>Favorite Genres</h2>
          <ul className='grid grid-cols-2'>
          {
            favoriteGenres.length==0 ? <div>fetching</div> :
            favoriteGenres.map((item)=>
            <GenreCard
            onClick={()=>{selectItem(item, 'genre')}}
            image={''}
            genre={item}
          />
            )
          }
          </ul>
        </div>
        <div className='row-span-3 col-span-5 px-5 mt-2' >
          <h2>Selected Favorite Genres</h2>
          <ul className='grid grid-cols-2'>
          {
            selectedGenres.length==0 ? <div>None selected</div> :
            selectedGenres.map((item)=>
            <GenreCard
            onClick={()=>{removeItem(item, 'genre')}}
            image={''}
            genre={item}
            />
            )
          }
          </ul>
        </div>
        <div className='row-span-1 col-span-10 flex justify-center mt-5'>
            <button onClick={getRecommendation} className='bg-[#1db954] w-4/6 rounded-lg py-1 px-2 hover:scale-105 cursor-pointer' >Click to get recommendation</button>
        </div>
        <div className='row-span-3 col-span-10 mt-3'>
          <h2 className='text-2xl  text-center'>Recommended Track List</h2>
          <ul className='grid gap-1'>
          {
            recommendation.length==0 ? <div>fetching</div> :
            recommendation.map(
              (item)=>(
                <TrackCard
                  image={item.image}
                  name={item.names}
                  artist={item.artist}
                  href={item.href}
                  />
              )
            )
          }
          </ul>
        </div>
      </main>
      <footer className='bg-[#191414]'>
        <hr className='border-1 border-white'></hr>
        <div className='flex justify-between p-2 text-white'>
          <div>
            Created by Masaya Sasaki
          </div>
            <div>
              <a className='hover:text-gray-200' href='https://github.com/masaya-sasaki' target='_blank' rel='noopener noreferrer'>
                Follow on Github 
              </a>
            </div>
          </div>
      </footer>
    </div>
  )
}

export async function getStaticProps(ctx){
  const parameters = new URLSearchParams()
  const scopes = [ 'user-read-email', 'user-read-private', 'user-top-read']
  parameters.append('client_id', process.env.REACT_APP_CLIENT_ID)
  parameters.append('response_type', 'code')
  parameters.append('redirect_uri', process.env.REACT_APP_REDIRECT_URI)
  parameters.append('scope', scopes.join(' '))
  parameters.append('state', 'state')
    
  return {
    props: {
      signInPath: `https://accounts.spotify.com/authorize?${parameters.toString()}`
    }
  }

}